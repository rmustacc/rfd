DDI_UFM(9F)              Kernel Functions for Drivers              DDI_UFM(9F)

NNAAMMEE
     ddddii__uuffmm, ddddii__uuffmm__iinniitt, ddddii__uuffmm__iiss__iiooccttll, ddddii__uuffmm__iiooccttll, ddddii__uuffmm__uuppddaattee,
     ddddii__uuffmm__ffiinnii - DDI upgradable firmware module interfaces

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ssyyss//ddddii__uuffmm..hh>>

     _i_n_t
     ddddii__uuffmm__iinniitt(_d_e_v___i_n_f_o___t _*_d_i_p, _i_n_t _v_e_r_s_i_o_n, _d_d_i___u_f_m___o_p_s___t _*_o_p_s,
         _d_d_i___u_f_m___h_a_n_d_l_e___t _*_*_u_f_m_p_p, _v_o_i_d _*_d_r_v___a_r_g);

     _b_o_o_l_e_a_n___t
     ddddii__uuffmm__iiss__iiooccttll(_d_d_i___u_f_m___h_a_n_d_l_e___t _*_u_f_m_p, _i_n_t _c_m_d);

     _i_n_t
     ddddii__uuffmm__iiooccttll(_d_d_i___u_f_m___h_a_n_d_l_e___t _*_u_f_m_p, _d_e_v___t _d_e_v, _i_n_t _c_m_d, _i_n_t_p_t_r___t _a_r_g,
         _i_n_t _m_o_d_e, _c_r_e_d___t _*_c_r_e_d_p, _i_n_t _*_r_v_a_l_p);

     _v_o_i_d
     ddddii__uuffmm__uuppddaattee(_d_d_i___u_f_m___h_a_n_d_l_e___t _*_u_f_m_p);

     _v_o_i_d
     ddddii__uuffmm__ffiinnii(_d_d_i___u_f_m___h_a_n_d_l_e___t _*_u_f_m_p);

IINNTTEERRFFAACCEE LLEEVVEELL
     EEvvoollvviinngg -- This interface is evolving still in illumos. API and ABI
     stability is not guaranteed.

PPAARRAAMMEETTEERRSS
     _d_i_p           Pointer to the devices _d_e_v___i_n_f_o structure for the specific
                   instance.

     _v_e_r_s_i_o_n       A value which indicates the current revision of the
                   interface that the device supports. Should generally be set
                   to DDI_UFM_CURRENT_VERSION.

     _o_p_s           A pointer to a UFM operations structure. See ddi_ufm(9E)
                   for more information.

     _u_f_m_p          A pinter to the opaque handle returned from ddddii__uuffmm__iinniitt().

     _u_f_m_p_p         A pointer to store the opaque handle from ddddii__uuffmm__iinniitt().

     _d_r_v___a_r_g       A driver specific argument that will be passed to various
                   operations.

     _d_e_v           Device number.

     _c_m_d           Command argument that indicates the operation to perform.
                   See ioctl(9E) for more information.

     _a_r_g           Argument used to pass data between a user program and the
                   kernel.  See ioctl(9E) for more information.

     _m_o_d_e          A bit field that describes the caller. See ioctl(9E) for
                   more information.

     _c_r_e_d_p         A pointer to the user credential structure. See ioctl(9E)
                   for more information.

     _r_v_a_l_p         A pointer to a return value. See ioctl(9E) for more
                   information.

DDEESSCCRRIIPPTTIIOONN
     These functions provide support for initializing and performing various
     upgradeable firmware module (UFM) operations. For more information,
     please see ddi_ufm(9E).

     The ddddii__uuffmm__iinniitt() function is used to initialize support for the UFM
     subsystem for a given device. The _d_i_p argument should be the _d_e_v___i_n_f_o
     structure of the specific device. The _v_e_r_s_i_o_n argument represents the
     current revision of the UFM interface that the driver supports. Drivers
     inside of illumos should always use DDI_UFM_CURRENT_VERSION.  Device
     drivers which need to bind to a specific revision, should instead pass
     the latest version: DDI_UFM_VERSION_ONE.  The operations structure, _o_p_s,
     should be filled according to the rules in ddi_ufm(9E).  These will be
     the entry points that device drivers call. The value of _d_r_v___a_r_g will be
     passed to all of the driver's entry points. When the function returns,
     _u_f_m_p_p will be filled in with a handle that the driver should reference
     when needing to perform subsequent UFM operations. No UFM entry points
     will be called until after the driver calls the ddddii__uuffmm__uuppddaattee()
     function.

     When the device driver is detaching or needs to unregistger from the UFM
     subsystem, then the device driver should call the ddddii__uuffmm__ffiinnii() function
     with the handle that they obtained during the call to initialize. Note,
     this function will block and ensure that any outstanding UFM operations
     are terminated. The driver must not hold any locks that are required in
     its callbacks across the call to ddddii__uuffmm__ffiinnii().

     The ddddii__uuffmm__iiss__iiooccttll() function is used during a device driver's
     ioctl(9E) entry point to determine if the ioctl command _c_m_d is a known
     UFM command. The device driver should not hold any locks that may be used
     by its UFM entry points while calling this function.

     The ddddii__uuffmm__iiooccttll() function should be called by a device driver when the
     ddddii__uuffmm__iiooccttll() function returns successfully. It will be used to handle
     a UFM ioctl on behalf of the device driver. The device driver should
     simply return the value from this and not perform any other handling of
     an ioctl. When the device driver calls this, it should ensure that it
     holds no locks that might be used during the various UFM entry points.

     The ddddii__uuffmm__uuppddaattee() function should be used in two different
     circumstances. It should be used at the end of a driver's attach(9E)
     endpoint to indicate that it is ready to receive UFM requests. It should
     also be called whenever the driver believes that the UFM might have
     changed. This may happen after a device reset or firmware change. Unlike
     the other functions, this can be called from any context with any locks
     held, excepting high-level interrupt context which normal device drivers
     will not have interrupts for.

RREETTUURRNN VVAALLUUEESS
     Upon successful completion, the ddddii__uuffmm__iinniitt() function returns zero,
     indicating that it has successfully registered with the UFM subsystem.
     _u_f_m_p_p will be filled in with a pointer to the UFM handle.

     The ddddii__uuffmm__iiss__iiooccttll() function will return B_TRUE if the specified
     command is a UFM ioctl, and B_FALSE otherwise.

     The ddddii__uuffmm__iiooccttll() function's return value should not be inspected or
     interpreted by the device driver. Instead, it should be returned
     umodified to the ioctl(9E) function.

CCOONNTTEEXXTT
     The ddddii__uuffmm__iinniitt() and ddddii__uuffmm__ffiinnii() functions are generally called from
     a device's attach(9E) and fini(9E) routines, though they may be called
     from uusseerr or kkeerrnneell context.

     The ddddii__uuffmm__iiss__iiooccttll() and ddddii__uuffmm__iiooccttll() functions should be called
     from user context from the same thread that received the ioctl(9E) entry
     point.

     The ddddii__uuffmm__uuppddaattee() function may be called from any context except a
     high-level interrupt handler above lock level.

SSEEEE AALLSSOO
     attach(9E), ddi_ufm(9E), fini(9E), ioctl(9E)

illumos                        February 21, 2017                       illumos
